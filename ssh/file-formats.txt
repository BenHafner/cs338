Ben Hafner

===== PRIVATE KEY =====

Here is what I found in the id_rsa_homework private key file:

-----BEGIN RSA PRIVATE KEY-----
MIIG4wIBAAKCAYEAv6IkKvZgWoBLKf8TopzqXDoxzSPuqwT6wbGW2t7uERL3fnUs
3nQ8ls8QHxGzCCGJ84HCNSGlRbnMKEnB7LrYC2QN1kzMVu9KeAiyFiWEFOzVHEUb
JpNXeHo90LRHfdybTsddFiV7iEaDTNYucPIAYk6tbjD1yMZKtJZWNrP7sj0MfB5Z
FBz129tmyfI2H9d6nJ7LHorkd+SiXb+SwtVw6t8BMaOixMTROWwseCIHTnNB1VWs
zD7tJm7CUGMA4v18kz76ZFlRkseQOdToElolLsBmK4XG2dPIie3t+lcpuR+FHNdu
45WCxBIjZ3TF+isw+vXUttSOCax/FGNhAA0tCIgw20F5YHLNC5607+5qFJi5A5gA
zL/uwaTXVWoqH8Gc1LvhtNAqHM4eRprVkij+JdQA2dDDuZhZLNDOQEZ+Kz5VDr9O
jRTdDmsWF4p86kAfutwxOhqtyM17eX2SOWT4SX5nolv6wffY3mQbHoec570kH4eb
B5j6ogfh57CejwdnAgMBAAECggGAQ/+t48zO/e4ePcW0WvRhON6xg0Bn1SmMLSTu
CbYnNcnMJoQ/qqQGR+ErsEqgg5cbE1wM5LuOoMJADl+1v2HBfbFAM7XGoGaCvzse
rjsbti0fpctjyflohWii/Kar455fQcH+Zvhf8EhNGPu7OPq2ZivS4JHg9SBfq9rY
tsqA2otNHdHK/BcWqrActjYLPJtCd8bk/m58iYqIjsmGszn3um/tRYbyH+5S65RV
5z7z5sOBLckb6tG9ZvDQZKPs0Z7ucycoEgMCXL3KQ9R55A+4Xjh7K2D4xlBn4uqk
A3qQ11ogD8nlYp6v6GfsOPrm7QSooFbWbIitoUKO/wcqnBkuCbpLd0tuac3fExeP
yWuQuIbEeWXwkB2BW11mLrW26hs9q5KOuDaMsLFt5iVvZkjPsToUt82wrr0N39CH
3//mD9O11PXl5BYh20vDX6Ut7CVk2yUVH5VKEbWbHGtGfMP46zMJYvnqyQmIdbB7
l8r4uFob3hMhzxyyYclonXCDw0zBAoHBAOYvajKL0sIydRqQ06tlxRHeuBzhk6dX
xO1QNkSFQpZOV0gA+BBQrDNYdJlln3cKWrfGmsHmxFkYvS2hs9b64xB1m6CZFgOr
u8aJn5AYbkv/n4Ugixo0vAA1drWrDjn0evtYf4TnexgOfWrwCVQ2IdxmbIAOkEo3
5PFXdA8HtBA5sc8vSFMh1zhCfkTpUsEEtIz202kNlxUns0DVuNr7av1DBu9sXD0w
E9eHRlA21Y4DuDKG6zlWoItxF8F/9qhfRwKBwQDVH+iDUaWcbx2uJYjU+gduDx5E
Z6FSavLrZbUtT0B4TwAU3OyWWQK9r3icmN3KrSSLB/ZLjX7mQ1PM0aohVbmNEUKB
cVxFOj/hN+HgmNo3z3WAEb4hyzIhKqsHSuL22gDkYhIBLOSHE1RgYW6TIRXAC7+j
CXPtsJw/zo+Fq8s4bIyyG5ntEQVyURMURDbzAFYuK/5KHeb9zbvIFGSO8XcGoy4r
m0lei3MAOaafaeIY6Kf5eaXtsY2c+H7i8wz7ZuECgcEA1c6w6+Zoi61mjJh9pDTR
ijm/9kOpbMTfzDa3UYoeQZLfC6iqwizM5pyBIYL9Tgs2HIHDedwqAUAzaFFMxKEh
jEZRmijYA+zebBmlNqkaukjkGToTOvJEtkTy0OfkPPzTxud6+y4wbjX3VP9FCw2F
Aj25BnGAoQ+t/mZnDRbwsCmG+ZVHrsA+MqnAs62uCk+ejVkvIeNXtHS90bkzDWR/
CmPZ60ZRnxwrMgUa0KM+Vb0quPQNRaMrWJphoICF0fs9AoHASz9X1b2nDmOBBDKG
bEPXCbnWwuof4DyYhhpD7Lp1lcS2z6bs9Wx59kUU/Z1PebbGFzx5blWH/364ALHq
MpjUyYTViWRf4qVdVoRngOgW6+uYnd4l1kKq8WDiP9Hl7qgr9nbVyopyKWreuKTN
6K6ewk6jm8nDn6FimXix3c05FDPnPR9Xqob++Ey9wsMO758nzmeEAeEq5GOWMF9a
3clNcA9/RrAuKG5t7R9twA0fYhIK9J9JwXGWAV0PV8vewoihAoHAFOVOBHBWeKGU
DTB3WZJv2rFRnPsps4hmTrShE3DT2vPSg0IRtbQU3FHCXl4XDD7JrABdP/52qh4W
42QNTI/TR+eO8WQkMghx4Pne5kUlvcyVaCxfO3V1q8y6LOmGU9sy/+BYHw9hG54M
pU3ffH+m36GqUF93ozVzWAS3/HBypWhrdIU0UxMtA9jsb6b4J9P/oQl72JCd+OTw
8mKJq0gBGiNr5F9NrTjKYpVy/LwH/urSeMdrIRyBL+tcQE4Fprvb
-----END RSA PRIVATE KEY-----

Based on appendix A.1.2 of RFC 8017, this is what I expect to find in the base64 
data:

   Name              Notes/Meaning
1. version           should be 0 I think
2. modulus           n
3. publicExponent    e
4. privateExponent   d
5. prime1            p
6. prime2            q
7. exponent1         d mod (p-1)
8. exponent2         d mod (q-1)
9. coefficient       inverse of q mod p

I think you only really need n and d to decrypt a message, but knowing the other 
stuff (p, q, d mod (p-1), d mod (q-1), and the inverse of q mod p) lets you 
decrypt faster with a cool math trick.

I decoded my id_rsa_homework pem file by copying the big base64 block of text 
into an online ASN.1 decoder. This gave me a list of 9 integers in hexadecimal. 
Each integer corresponds to one of the 9 components of the private key format 
outlined above.

   Name              Notes/Meaning         Value        Offset   Length
1. version           should be 0 I think   0            4        2+1      
2. modulus           n                     4348884...   7        4+385
3. publicExponent    e                     65537        396      2+3
4. privateExponent   d                     1543148...   401      4+384
5. prime1            p                     2167258...   789      3+193
6. prime2            q                     2006628...   985      3+193
7. exponent1         d mod (p-1)           2013057...   1181     3+193
8. exponent2         d mod (q-1)           7084758...   1377     3+192
9. coefficient       inverse of q mod p    1967391...   1572     3+192

The values are in base 10. The offset column in this table indicates the 
starting index of the bytes used to represent that integer in the ASN.1 
encoding. The length column represents the number of bytes used to store the 
integer. For the version number, as an example, 2+1 means 2 bytes were used to 
store the data type and length and then 1 byte was used to store the actual 
value. The first of those 2 bytes is 0x02, which represents the integer data 
type. The second is 0x01, which means the integer is 1 byte long. And then the 1 
byte actually used to store the value is just 0x00 because the value is zero.

Some of the values had way to many digits to fit in the table, so here they are 
in their full glory:

n = 
43488841507753722164536807349890899684388124142679314464007553214695113642003218
62444559118316890740198199482103144642525588525957992842748786646353078807347990
43193688481174302903219005776585496149316821993992157807380421130540878667274069
63166271511491717069615871266738852686518037469711204342360828585082306220181345
95296808591693828802718194779263440117071289549693462660339987360274748217006106
71320204769049617778635359571341771431258309954308257083751228327785013789338579
35047049079437557845581563578983433019720447613238603336028484422961769656800921
33025035388823976879025130381685693424177242992427838399314635887815494992949916
52700152219778619496518270061707675158424735732931639910743461505256597282390676
34726897956163454445796573927100797890614400733026225340833434653750208657040273
27292297567415048677277078972997076412382794951325260210711698467405238726983867
370453359558596294282801462489650513268639591

e = 65537 (this is a common RSA public exponent)

d = 
15431481594562046003575132443073574807520115765720241357713896730209421666307350
79590890982139238814155501914282140297266163559075836909808551405479970820526992
65292418414478972397490852180211113004140602949025552433139016027445994375809977
40641647374761430649158751336008850255961929312573569998345988811603964648218826
00876257439306651033877223852049549108480596281156010714042547050722328910180157
95070744188843689235731957319247949931091017257235432175452565803382282068375060
23319155665514134515081102684976428343488420866964150306744096303143226513860274
31578271080243675501267084701664836833166688753803580116286628160588925134721275
93374243080557215034821440430460159375326902867914597209514058337327411774125272
13704207580644325325977605971999120457240280552136086374541410697724641620607166
96582686838999394231845273521828394323280886089096076328641279962996008527474677
881878830077737328801807441249139860644777153

p = 
21672589151027714415662776241530306227434529311730026703364178331515611336494831
95725610549742944059295317409104019038678595547000514499262424113458873108700285
58671745878666905616010819827960541313686231555708637213207336208347959950731534
45826961869369167836818613686442293693746743699597899032682766465221714474338796
31302364154070638162785011989373451846026137730721930412767303445981838500836036
263006197400732970291632361669506125759467584065396455667949383

q = 
20066287975422392401333638357116031075688628476442820018906231080982096766117705
81255160541764450598634248111479589690420027412926055659584985257897142883343795
59198101248861892698182870608525100253909538334377130184271399384634466572786691
98986263606275412762667146784763639836608232180334274587617453810038753277661250
55759262439908031600803155396682607376404942927931242376099712893385152333390451
929840047094253134690315606067775555851476029482311290579543777

d mod (p-1) = 
20130570395038849616843246424568043414999916647424411333149075968577770183221484
05581592331126721953484949752991410271457662470483991022294288806059103126768408
45332924281214721645315511027469520910773084818075401402517408247966396295845574
69235248437309897048972279621412151705344145688226841413484454976637725970229029
20119934014600851847374381186827586060927340406487431404348640157021200801072567
732338057289351340975827828314837662686449329575612918539615037

d mod (q-1) = 
70847587998123004985650709972276400058037318509606849934765289986243608506827836
91603698639835149976623566390211060293670600471137830829476017193719881773302422
47933970855763207828135777196188762801961152863138748391573601226949192368846798
90038169825534701911188353060507173379812607293705049007870403544636878723744400
36195366525326448145472666237978371314316183897554208666947107227984045629540819
26309853208323897700523563922704099773369300489665394398890145

inverse of q mod p = 
19673913157533378567518404926499667571900213637758846189823609791630116482141814
05197451646566691408930908508481478163196931065436110376152470475348231919071336
77348103100084489649464793180171349206376392478335635850350161802247974748284521
06082984195427284173980360897441259235083777039877526343600373181066909801276177
70232510850851725322776758528617770025597713154482814504096282641896896578091927
02872708538624512922191524165812096791074263225869109888990171

===== PUBLIC KEY =====

Here is what I found in the id_rsa_homework.pub public key file:

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC/oiQq9mBagEsp/xOinOpcOjHNI+6rBPrBsZba3u4R
Evd+dSzedDyWzxAfEbMIIYnzgcI1IaVFucwoScHsutgLZA3WTMxW70p4CLIWJYQU7NUcRRsmk1d4ej3Q
tEd93JtOx10WJXuIRoNM1i5w8gBiTq1uMPXIxkq0llY2s/uyPQx8HlkUHPXb22bJ8jYf13qcnsseiuR3
5KJdv5LC1XDq3wExo6LExNE5bCx4IgdOc0HVVazMPu0mbsJQYwDi/XyTPvpkWVGSx5A51OgSWiUuwGYr
hcbZ08iJ7e36Vym5H4Uc127jlYLEEiNndMX6KzD69dS21I4JrH8UY2EADS0IiDDbQXlgcs0LnrTv7moU
mLkDmADMv+7BpNdVaiofwZzUu+G00Coczh5GmtWSKP4l1ADZ0MO5mFks0M5ARn4rPlUOv06NFN0OaxYX
inzqQB+63DE6Gq3IzXt5fZI5ZPhJfmeiW/rB99jeZBseh5znvSQfh5sHmPqiB+HnsJ6PB2c= 
NEBAKANEZER@MacBook-Air-53.local

The public key has a different format than the private key. It starts with the 
algorithm name "ssh-rsa" and then there's some base64 encoded data and then it 
ends with a comment noting my username and computer name. Here's what I expect 
to find in that base64 encoded data:

   Name              Notes/Meaning
1. algorithm         should be "ssh-rsa"
2. public exponent   e
3. modulus           n

This is not in ANS.1, but it follows a similar protocol. Each of the 3 
components is encoded separately and then they are concatenated, with a 4 byte 
header at the start of each component indicating its length in bytes. I decoded 
the base64 data online and then manually separated it out into the three 
components and pulled of the 4 byte headers to get the actual values. Here's 
what I got:

   Name              Notes/Meaning         Value        Offset   Length 
1. algorithm         should be "ssh-rsa"   ssh-rsa      0        4+7
2. public exponent   e                     65537        11       4+3
3. modulus           n                     4348884...   18       4+385

I converted the bytes storing the algorithm name into ASCII characters and the 
bytes storing e and n into base 10 integers. The offset column indicates the 
starting index and the length indicates the number of bytes used to store it 
(plus the 4 byte header). Here's the full value of n that didn't fit in the 
table:

43488841507753722164536807349890899684388124142679314464007553214695113642003218
62444559118316890740198199482103144642525588525957992842748786646353078807347990
43193688481174302903219005776585496149316821993992157807380421130540878667274069
63166271511491717069615871266738852686518037469711204342360828585082306220181345
95296808591693828802718194779263440117071289549693462660339987360274748217006106
71320204769049617778635359571341771431258309954308257083751228327785013789338579
35047049079437557845581563578983433019720447613238603336028484422961769656800921
33025035388823976879025130381685693424177242992427838399314635887815494992949916
52700152219778619496518270061707675158424735732931639910743461505256597282390676
34726897956163454445796573927100797890614400733026225340833434653750208657040273
27292297567415048677277078972997076412382794951325260210711698467405238726983867
370453359558596294282801462489650513268639591

===== SANITY CHECK =====

First, I checked that the values of n and e I found in the private and public 
keys were the same. They were. Then I checked that p*q = n. This also worked. 
Next I computed e*n mod (p-1)*(q-1), which came out to 1, as expected. I also 
checked that "exponent1" and "exponent2" were really d mod (p-1) and d mod 
(q-1), and they were. Lastly, I multiplied the "coefficient" by q mod p and got 
1, confirming that it really is the inverse of q mod p. So everything checks 
out! The way I checked all this was using Python, since Python lets you make 
integers really big.
