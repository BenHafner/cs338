Ben Hafner

===== PRIVATE KEY =====

Here is what I found in the id_rsa_homework private key file:

-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----

Based on appendix A.1.2 of RFC 8017, this is what I expect to find in the base64 data:

   Name              Notes/Meaning
1. version           should be 0 I think
2. modulus           n
3. publicExponent    e
4. privateExponent   d
5. prime1            p
6. prime2            q
7. exponent1         d mod (p-1)
8. exponent2         d mod (q-1)
9. coefficient       inverse of q mod p

I think you only really need n and d to decrypt a message, but knowing the other stuff (p, q, d mod (p-1), d mod (q-1), and the inverse of q mod p) lets you decrypt faster with a cool math trick.

I decoded my id_rsa_homework pem file by copying the big base64 block of text into an online ASN.1 decoder. This gave me a list of 9 integers in hexadecimal. Each integer corresponds to one of the 9 components of the private key format outlined above.

   Name              Notes/Meaning         Value        Offset   Length
1. version           should be 0 I think   0            4        2+1      
2. modulus           n                     4348884...   7        4+385
3. publicExponent    e                     65537        396      2+3
4. privateExponent   d                     1543148...   401      4+384
5. prime1            p                     2167258...   789      3+193
6. prime2            q                     2006628...   985      3+193
7. exponent1         d mod (p-1)           2013057...   1181     3+193
8. exponent2         d mod (q-1)           7084758...   1377     3+192
9. coefficient       inverse of q mod p    1967391...   1572     3+192

The values are in base 10. The offset column in this table indicates the starting index of the bytes used to represent that integer in the ASN.1 encoding. The length column represents the number of bytes used to store the integer. For the version number, as an example, 2+1 means 2 bytes were used to store the data type and length and then 1 byte was used to store the actual value. The first of those 2 bytes is 0x02, which represents the integer data type. The second is 0x01, which means the integer is 1 byte long. And then the 1 byte actually used to store the value is just 0x00 because the value is zero.

Some of the values had way to many digits to fit in the table, so here they are in their full glory:

n = 4348884150775372216453680734989089968438812414267931446400755321469511364200321862444559118316890740198199482103144642525588525957992842748786646353078807347990431936884811743029032190057765854961493168219939921578073804211305408786672740696316627151149171706961587126673885268651803746971120434236082858508230622018134595296808591693828802718194779263440117071289549693462660339987360274748217006106713202047690496177786353595713417714312583099543082570837512283277850137893385793504704907943755784558156357898343301972044761323860333602848442296176965680092133025035388823976879025130381685693424177242992427838399314635887815494992949916527001522197786194965182700617076751584247357329316399107434615052565972823906763472689795616345444579657392710079789061440073302622534083343465375020865704027327292297567415048677277078972997076412382794951325260210711698467405238726983867370453359558596294282801462489650513268639591

e = 65537 (this is a common RSA public exponent)

d = 1543148159456204600357513244307357480752011576572024135771389673020942166630735079590890982139238814155501914282140297266163559075836909808551405479970820526992652924184144789723974908521802111130041406029490255524331390160274459943758099774064164737476143064915875133600885025596192931257356999834598881160396464821882600876257439306651033877223852049549108480596281156010714042547050722328910180157950707441888436892357319573192479499310910172572354321754525658033822820683750602331915566551413451508110268497642834348842086696415030674409630314322651386027431578271080243675501267084701664836833166688753803580116286628160588925134721275933742430805572150348214404304601593753269028679145972095140583373274117741252721370420758064432532597760597199912045724028055213608637454141069772464162060716696582686838999394231845273521828394323280886089096076328641279962996008527474677881878830077737328801807441249139860644777153

p = 2167258915102771441566277624153030622743452931173002670336417833151561133649483195725610549742944059295317409104019038678595547000514499262424113458873108700285586717458786669056160108198279605413136862315557086372132073362083479599507315344582696186936916783681861368644229369374674369959789903268276646522171447433879631302364154070638162785011989373451846026137730721930412767303445981838500836036263006197400732970291632361669506125759467584065396455667949383

q = 2006628797542239240133363835711603107568862847644282001890623108098209676611770581255160541764450598634248111479589690420027412926055659584985257897142883343795591981012488618926981828706085251002539095383343771301842713993846344665727866919898626360627541276266714678476363983660823218033427458761745381003875327766125055759262439908031600803155396682607376404942927931242376099712893385152333390451929840047094253134690315606067775555851476029482311290579543777

d mod (p-1) = 2013057039503884961684324642456804341499991664742441133314907596857777018322148405581592331126721953484949752991410271457662470483991022294288806059103126768408453329242812147216453155110274695209107730848180754014025174082479663962958455746923524843730989704897227962141215170534414568822684141348445497663772597022902920119934014600851847374381186827586060927340406487431404348640157021200801072567732338057289351340975827828314837662686449329575612918539615037

d mod (q-1) = 708475879981230049856507099722764000580373185096068499347652899862436085068278369160369863983514997662356639021106029367060047113783082947601719371988177330242247933970855763207828135777196188762801961152863138748391573601226949192368846798900381698255347019111883530605071733798126072937050490078704035446368787237444003619536652532644814547266623797837131431618389755420866694710722798404562954081926309853208323897700523563922704099773369300489665394398890145

inverse of q mod p = 196739131575333785675184049264996675719002136377588461898236097916301164821418140519745164656669140893090850848147816319693106543611037615247047534823191907133677348103100084489649464793180171349206376392478335635850350161802247974748284521060829841954272841739803608974412592350837770398775263436003731810669098012761777023251085085172532277675852861777002559771315448281450409628264189689657809192702872708538624512922191524165812096791074263225869109888990171

===== PUBLIC KEY =====

Here is what I found in the id_rsa_homework.pub public key file:

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC/oiQq9mBagEsp/xOinOpcOjHNI+6rBPrBsZba3u4REvd+dSzedDyWzxAfEbMIIYnzgcI1IaVFucwoScHsutgLZA3WTMxW70p4CLIWJYQU7NUcRRsmk1d4ej3QtEd93JtOx10WJXuIRoNM1i5w8gBiTq1uMPXIxkq0llY2s/uyPQx8HlkUHPXb22bJ8jYf13qcnsseiuR35KJdv5LC1XDq3wExo6LExNE5bCx4IgdOc0HVVazMPu0mbsJQYwDi/XyTPvpkWVGSx5A51OgSWiUuwGYrhcbZ08iJ7e36Vym5H4Uc127jlYLEEiNndMX6KzD69dS21I4JrH8UY2EADS0IiDDbQXlgcs0LnrTv7moUmLkDmADMv+7BpNdVaiofwZzUu+G00Coczh5GmtWSKP4l1ADZ0MO5mFks0M5ARn4rPlUOv06NFN0OaxYXinzqQB+63DE6Gq3IzXt5fZI5ZPhJfmeiW/rB99jeZBseh5znvSQfh5sHmPqiB+HnsJ6PB2c= NEBAKANEZER@MacBook-Air-53.local

The public key has a different format than the private key. It starts with the algorithm name "ssh-rsa" and then there's some base64 encoded data and then it ends with a comment noting my username and computer name. Here's what I expect to find in that base64 encoded data:

   Name              Notes/Meaning
1. algorithm         should be "ssh-rsa"
2. public exponent   e
3. modulus           n

This is not in ANS.1, but it follows a similar protocol. Each of the 3 components is encoded separately and then they are concatenated, with a 4 byte header at the start of each component indicating its length in bytes. I decoded the base64 data online and then manually separated it out into the three components and pulled of the 4 byte headers to get the actual values. Here's what I got:

   Name              Notes/Meaning         Value        Offset   Length 
1. algorithm         should be "ssh-rsa"   ssh-rsa      0        4+7
2. public exponent   e                     65537        11       4+3
3. modulus           n                     4348884...   18       4+385

I converted the bytes storing the algorithm name into ASCII characters and the bytes storing e and n into base 10 integers. The offset column indicates the starting index and the length indicates the number of bytes used to store it (plus the 4 byte header). Here's the full value of n that didn't fit in the table:



===== SANITY CHECK =====

First, I checked that the values of n and e I found in the private and public keys were the same. They were. Then I checked that p*q = n. This also worked. Next I computed e*n mod (p-1)*(q-1), which came out to 1, as expected. I also checked that "exponent1" and "exponent2" were really d mod (p-1) and d mod (q-1), and they were. Lastly, I multiplied the "coefficient" by q mod p and got 1, confirming that it really is the inverse of q mod p. So everything checks out! The way I checked all this was using Python, since Python lets you make integers really big.